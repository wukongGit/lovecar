apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

def buildTime() {
    def date = new Date().format("yyyy-MM-dd-HH-mm-ss", TimeZone.getTimeZone("PRC"))
    println("build time:" + date)
    return date
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.sunc.car.lovecar"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled true
        manifestPlaceholders = [BUILD_TIME_VALUE: buildTime()]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk { //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "arm64-v8a", "x86_64"
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    dataBinding {
        enabled true
    }

    kotlin {
        experimental {
            coroutines 'enable'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/rxjava.properties'
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    configurations {
        all*.exclude module: 'okio'
    }

    flavorDimensions "default"
    productFlavors {
        huawei {}
        meizu {}
    }
    //批量配置
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    signingConfigs {
        config {
            def propsFile = rootProject.file('pro.properties')
            def props = new Properties()
            props.load(new FileInputStream(propsFile))
            storeFile = file(props['key.store'])
            storePassword = props['key.store.password']
            keyAlias = props['key.alias']
            keyPassword = props['key.alias.password']
        }
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.config

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    if (variant.name.endsWith("Release")) {
                        // 输出apk名称为tjyc_v1.0_yyyy-MM-dd-HH-mm-ss_release.apk
                        def fileName = "lovecar_" +
                                defaultConfig.versionName +
                                "_" +
                                defaultConfig.manifestPlaceholders.get("BUILD_TIME_VALUE").toString() +
                                "_${variant.productFlavors[0].name}.apk"
                        outputFileName = fileName
                    }
                }
            }
        }

        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    // 使用默认的Run按钮执行的任务是":${ProjectName}:assembleDebug"，
                    // 在这个工程中即是：":TjManagement:assembleDebug"
                    // 使用默认的Run按钮执行时，不对生成的apk进行拷贝和重命名，以免影响调试
                    // 除了":TjManagement:assembleDebug"的其他任务都会执行apk的拷贝和重命名的操作
                    if (variant.name.endsWith("Debug")
                            && !project.gradle.startParameter.taskNames.contains(":" + project.name + ":assembleDebug")) {
                        def fileName = "lovecar_" +
                                defaultConfig.versionName +
                                "_" +
                                defaultConfig.manifestPlaceholders.get("BUILD_TIME_VALUE").toString() +
                                "_debug.apk"
                        outputFileName = fileName
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation(name:'paysdk-release-1.2.1', ext:'aar')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "com.android.support:multidex:${MULTIDEX_VERSION}"
    implementation "com.android.support:design:${DESIGN_VERSION}"
    implementation "com.android.support:appcompat-v7:${APPCOMPAT_V7_VERSION}"
    implementation "com.android.support:cardview-v7:${CARDVIEW_VERSION}"
    implementation "com.android.support.constraint:constraint-layout:${CONSTRAINT_LAYOUT_VERSION}"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.18'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation "junit:junit:${JUNIT_VERSION}"
    androidTestImplementation "com.android.support.test:runner:${TEST_RUNNER}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${ESPRESSO_CORE}"

    //implementation "io.reactivex:rxandroid:${RXANDROID_VERSION}"

    //implementation "io.reactivex:rxjava:${RXJAVA_VERSION}"
    implementation "com.github.bumptech.glide:glide:${GLIDE_VERSION}"
    implementation "com.google.dagger:dagger:${DAGGER_VERSION}"
    kapt "com.google.dagger:dagger-compiler:${DAGGER_COMPILE_VERSION}"
    kapt "com.android.databinding:compiler:${DATABINDING_COMPILE}"
    implementation "io.paperdb:paperdb:${PAPERDB_VERSION}"
    implementation "com.squareup:otto:${EVENTBUS_OTTO_VERSION}"
    implementation "com.squareup.retrofit2:converter-jackson:${CONVERTER_JACKSON_VERSION}"
    implementation "com.github.githubwing:ByeBurger:${BYE_BURGER_VERSION}"
    implementation "com.github.lecho:hellocharts-library:${HELLO_CHART_VERSION}"
    implementation "com.prolificinteractive:material-calendarview:${MATERIAL_CALENDARVIEW}"

    // https://github.com/ogaclejapan/SmartTabLayout
    implementation "com.ogaclejapan.smarttablayout:library:${SMARTTABLAYOUT_LIB_VERSION}"
    implementation "com.ogaclejapan.smarttablayout:utils-v4:${SMARTTABLAYOUT_UTILS_VERSION}"
    implementation "com.tbruyelle.rxpermissions:rxpermissions:${RXPERMISSIONS_VERSION}"
    implementation "cn.bmob.android:bmob-sdk:${BMOB_SDK_VERSION}"

    //友盟
    implementation "com.umeng.analytics:analytics:${UMENG_VERSION}"

    //高德

    //implementation "com.amap.api:3dmap:${GAODE_MAP_VERSION}"

    //定位功能
    implementation "com.amap.api:location:${GAODE_LOCATION_VERSION}"

    //搜索功能
    implementation "com.amap.api:search:${GAODE_SEARCH_VERSION}"

    //导航

    //implementation "com.amap.api:navi-3dmap:${GAODE_NAVI_VERSION}"
}

kapt {
    generateStubs = true
}
